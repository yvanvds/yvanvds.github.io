//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DemoTools {

public class Counter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Counter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Counter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Counter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DemoToolsPINVOKE.delete_Counter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Counter() : this(DemoToolsPINVOKE.new_Counter(), true) {
  }

  public void Reset() {
    DemoToolsPINVOKE.Counter_Reset(swigCPtr);
  }

  public void Increase() {
    DemoToolsPINVOKE.Counter_Increase(swigCPtr);
  }

  public int Get() {
    int ret = DemoToolsPINVOKE.Counter_Get(swigCPtr);
    return ret;
  }

  public Counter Add(int value) {
    Counter ret = new Counter(DemoToolsPINVOKE.Counter_Add__SWIG_0(swigCPtr, value), false);
    return ret;
  }

  public Counter Add(Counter other) {
    Counter ret = new Counter(DemoToolsPINVOKE.Counter_Add__SWIG_1(swigCPtr, Counter.getCPtr(other)), false);
    if (DemoToolsPINVOKE.SWIGPendingException.Pending) throw DemoToolsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
